// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ArchiveItem struct {
	_tab flatbuffers.Table
}

func GetRootAsArchiveItem(buf []byte, offset flatbuffers.UOffsetT) *ArchiveItem {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ArchiveItem{}
	x.Init(buf, n+offset)
	return x
}

func FinishArchiveItemBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsArchiveItem(buf []byte, offset flatbuffers.UOffsetT) *ArchiveItem {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ArchiveItem{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedArchiveItemBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ArchiveItem) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArchiveItem) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ArchiveItem) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArchiveItem) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ArchiveItem) DateTrans() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ArchiveItem) TransactionAmount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ArchiveItem) MutateTransactionAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *ArchiveItem) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ArchiveItem) Status() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArchiveItem) MutateStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func ArchiveItemStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ArchiveItemAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func ArchiveItemAddDateTrans(builder *flatbuffers.Builder, dateTrans flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dateTrans), 0)
}
func ArchiveItemAddTransactionAmount(builder *flatbuffers.Builder, transactionAmount float64) {
	builder.PrependFloat64Slot(2, transactionAmount, 0.0)
}
func ArchiveItemAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(description), 0)
}
func ArchiveItemAddStatus(builder *flatbuffers.Builder, status int32) {
	builder.PrependInt32Slot(4, status, 0)
}
func ArchiveItemEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
