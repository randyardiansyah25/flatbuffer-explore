// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HistoryItem struct {
	_tab flatbuffers.Table
}

func GetRootAsHistoryItem(buf []byte, offset flatbuffers.UOffsetT) *HistoryItem {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HistoryItem{}
	x.Init(buf, n+offset)
	return x
}

func FinishHistoryItemBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHistoryItem(buf []byte, offset flatbuffers.UOffsetT) *HistoryItem {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HistoryItem{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHistoryItemBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *HistoryItem) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HistoryItem) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HistoryItem) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HistoryItem) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *HistoryItem) DateTrans() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HistoryItem) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HistoryItem) DebetAmount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *HistoryItem) MutateDebetAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *HistoryItem) CreditAmount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *HistoryItem) MutateCreditAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *HistoryItem) Balance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *HistoryItem) MutateBalance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func HistoryItemStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func HistoryItemAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func HistoryItemAddDateTrans(builder *flatbuffers.Builder, dateTrans flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dateTrans), 0)
}
func HistoryItemAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(description), 0)
}
func HistoryItemAddDebetAmount(builder *flatbuffers.Builder, debetAmount float64) {
	builder.PrependFloat64Slot(3, debetAmount, 0.0)
}
func HistoryItemAddCreditAmount(builder *flatbuffers.Builder, creditAmount float64) {
	builder.PrependFloat64Slot(4, creditAmount, 0.0)
}
func HistoryItemAddBalance(builder *flatbuffers.Builder, balance float64) {
	builder.PrependFloat64Slot(5, balance, 0.0)
}
func HistoryItemEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
